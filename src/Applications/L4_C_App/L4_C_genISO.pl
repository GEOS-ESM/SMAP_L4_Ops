#!/usr/bin/perl

#******************************************************************************
# English Name: Level-4 Carbon - Generate ISO
# -------------
#
# The text following this prolog contains documentation for this application
# using Perl POD markup language. Formatted documentation can be obtained
# using the following commands:
#
#        perldoc L4_C_genISO.pl
#        L4_C_genISO.pl -h|-help
#        L4_C_genISO.pl -man
#
#******************************************************************************

=head1 NAME

L4_C_genISO.pl - Creates Level-4 Carbon (L4_C) granules in HDF-5 format with ISO metadata.

=head1 SYNOPSIS

L4_C_genISO.pl [-h|help] [-man] [-sn|stream_name name] [-st|stream_type type] [-date date] [-pc counter]

=head1 OPTIONS

=over 17

=item -h|help

Print a brief help message and exit.

=item -man

Print this command's manual page and exit.

=item -sn|stream_name name

Set the stream name, which is also the name of the last directory in the
fully qualified path location of the stream.

=item -st|stream_type type

Set the stream type, which is also the last parent directory in the fully
qualified path location of the stream.

=item -date date

Set the data day to process specified as ccyymmdd.

=item -pc counter

Set the product counter. I<counter> is an integer between 1 and 999. The default
value is 1. The HDF-5 granules include the 3-digit product counter in the
filename. Specify the next value in sequence when the HDF-5 granules are to be
re-generated without overwriting granules from prior invocation of this
application.

=back

=head1 DESCRIPTION

Generates SMAP Level-4 Carbon (L4_C) granules for the data collections
defined in the L4_C product specification document (PSD). HDF-5 files with a
full complement of ISO 19115 metadata as HDF groups and ISO 19139 XML are
created.

=head1 NOTES

=over 4

=item 1.

This application requires a configured L4_C data stream. The following
documentation is available:

 "SMAP Level-4 SPS User Guide"
 "SMAP Level-4 Carbon SPS User Guide"

=item 2.

This application operates on data sets generated by the model application
component of the L4_C SPS - L4_C.pl. Please reference the L4_C.pl
application for additional information.

=item 3.

This application is typically invoked by L4_C.pl. It can also operate as a
standalone application.

=item 4.

The L4 SPS keeps a record of completed tasks. This application will simply exit
if the system records indicate that processing was completed for the specified
date. Use the L4 SPS dashboard command (L4.pl) to delete old files. For example:

L4.pl -remove history -st SPL4C -sn SPL4C_V06006 -task genISO -date 20140101

Please reference the L4 SPS documentation for more information.

=back

=head1 SEE ALSO

L4_C.pl(1), L4.pl(1)

=head1 AUTHORS

Joseph V. Ardizzone - NASA Goddard Space Flight Center, Global Modeling and Assimilation Office (GMAO)

=head1 COPYRIGHT

This software is the property of the National Aeronautics and Space
Administration (NASA) and is subject to the regulations contained in the NASA
Procedural Requirements document NPR 2210.1C managed by the Office of the Chief
Technologist.

=cut

#******************************************************************************
# English Name: Level-4 Carbon SPS - Generate ISO
# -------------
#
# Purpose: Generates SMAP Level-4 Carbon (L4_C) granules for the data
# -------- collections defined in the L4_C product specification document (PSD).
#          HDF-5 files with a full complement of ISO 19115 metadata as HDF
#          groups and ISO 19139 XML are created.
#
# Language: Perl
# ---------
#
# Notes: 1. This application requires a configured L4_C data stream. The
# ------    following documentation is available:
#
#           "SMAP Level-4 SPS User's Guide"
#           "SMAP Level-4 Carbon SPS User's Guide"
#
#        2. This application operates on data sets generated by the model
#           application component of the L4_C SPS - L4_C.pl. Please reference
#           the L4_C.pl application for additional information.
#
#        3. This application is typically invoked by the L4_C.pl. It can also
#           operate as a standalone application. 
#
#        4. The L4 SPS keeps a record of completed tasks. This application will
#           simply exit if the system records indicate that processing was
#           completed for the specified date/time. Use the L4 SPS dashboard
#           command (L4.pl) to delete old files. Please reference the L4 SPS
#           documentation for more information. 
#
# See Also: L4_C.pl, DMGR.pm, CONFIG.pm, DTR.pm, CLOCK.pm, FIND.pm,
# --------  METADATA.pm, ERROR::Handler.pm, LOG::Handler.pm
#
# Prerequisite: L4_C.pl
# -------------
#
# Usage: L4_C_genISO.pl [path] [ccyymmdd] [hhmmss] [-pc product counter]
# ------
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# path                  string       IN  Absolute path of the target L4_C data
#                                        stream. For example:
#
#                                        /home/Operations/SPL4C/SPL4C_V05002
#
# ccyymmdd             integer       IN  Date to be processed (e.g. 20140101).
#
# hhmmss               integer       IN  Time to be processed. This application
#                                        operates in 1-day segements. This 
#                                        argument is currently ignored.
#
# product counter      integer   OPT,IN  Optional 3-digit product counter
#                                        (default: 001)
#
# L4_C_genISO.pl       integer      OUT  function return value:
#
#                                        0: success
#
#                                        1: usage error or runtime configuration
#                                           error.
#
#                                        2: Error occurred while generating the
#                                           L4_C granules.
#
#                                        3: Granule verification failed.
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/16/2014      J.Ardizzone  documented.
#******************************************************************************

  use strict;

  use File::Path;
  use File::Copy;
  use File::Basename;
  use File::Spec;
  use Getopt::Std;
  use Getopt::Long;
  use Pod::Usage;
  use Data::UUID;

  use CLOCK;
  use Time::Piece;
  use Time::Local;
  use Time::Seconds;

  use CONFIG;
  use FIND;
  use DTR;
  use DMGR;
  use FIND;
  use LOG::Handler;
  use METADATA;
  use ERROR::Handler;

# Retrieve run-time input
# parameters
# =======================

  CONFIG: my $config = getRunTimeConfig();

  FUNCTION_NAME: my $this = "L4_C_genISO.pl";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

  $eh->comment("Begin Generation of SMAP Carbon Granules");

# Locate the carbon model input
# and output data transactions.
# =============================

  my $import = DMGR->new($config->{L4_C_IMPORT},%$config);
  my $input  = DMGR->new($config->{L4_C_INPUT},%$config);
  my $output = DMGR->new($config->{L4_C_OUTPUT},%$config);

  @{$input}{keys %$import} = values %$import;

# Generate the Carbon model data collection.
# ==========================================

  genDAAC($input,$output,$config);
  exit 2 if $eh->isError();

  $output->execute("MDL");
  ($output->stat("MDL"))[0] or exit 3;

exit 0;

#******************************************************************************
sub genDAAC { DMGR:   my $input = shift;
              DMGR:   my $output = shift;
              CONFIG: my $config = shift;
#******************************************************************************
# English Name: Generate Data for Distributed Active Archive Centers (DAAC)
# -------------
#
# Purpose: Generates carbon model data for the data collections defined in
# -------- the L4_C SMAP product specification document (PSD). HDF-5 files with
#          a full complement of ISO 19115 metadata as HDF groups and ISO 19139
#          XML will be created using the input and output specifications.
#
# Language: Perl
# ---------
#
# See Also: DMGR.pm, CONFIG.pm, DTR.pm, CLOCK.pm
# --------- getRunTimeConfig()
#
# Prerequisite: getRunTimeConfig()
# -------------
#
# Usage: $rc = genDAAC($input,$output,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $input                  DMGR       IN  DMGR object reference describing all
#                                        input data generated by the carbon 
#                                        model.
#
# $output                 DMGR       IN  DMGR object reference describing all
#                                        output collection granules.
#
# $config               CONFIG       IN  CONFIG object reference describing 
#                                        all runtime configuration parameters.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred.
#
#                                        1: Data transaction file is missing
#                                           for a collection type.
#
#                                        2: Error occurred while generating
#                                           granules
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/08/2014      J.Ardizzone  documented.
#******************************************************************************

  FUNCTION_NAME: my $this = "genDAAC";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Retrieve the data transaction
# information for the carbon model.
# =================================

  DTR: my $dtr = $input->{"L4_C_DAILY"};
  $dtr or return $eh->error(1,TYPE=>"MDL");

  CLOCK: my $time = ($dtr->times())[0];

# Generate the granules for the collection
# types defined in the L4_C PSD.
# ========================================

  genMDL($time,$input,$output,$config);
  $eh->isError() and return $eh->traceback(2);

return 1;

}

#******************************************************************************
sub genMDL { CLOCK:  my $time = shift;
             DMGR:   my $input = shift;
             DMGR:   my $output = shift;
             CONFIG: my $config = shift;
#******************************************************************************
# English Name: Generate Carbon Model (MDL) Granule
# -------------
#
# Purpose: Performs all functions for generating (or finalizing) the Carbon
# -------- Model (MDL) granule. The primary purpose is to generate and insert
#          the SMAP required ISO metadata.
#
# Language: Perl
# ---------
#
# See Also: DMGR.pm, CONFIG.pm, DTR.pm, CLOCK.pm, ERROR::Handler.pm
# --------- getRunTimeConfig()
#
# Prerequisite: getRunTimeConfig()
# -------------
#
# Usage: $rc = genMDL($time,$input,$output,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        granule date/time.
#
# $input                  DMGR       IN  DMGR object reference describing all
#                                        input data generated by the carbon
#                                        model.
#
# $output                 DMGR       IN  DMGR object reference describing all
#                                        output collection granules.
#
# $config               CONFIG       IN  CONFIG object reference describing all
#                                        runtime configuration parameters.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler referent.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred.
#
#                                        1: Data transaction file is missing
#                                           for input MDL data.
#
#                                        2: Data transaction file is missing
#                                           for output MDL data.
#
#                                        3: Error occurred while generating
#                                           the MDL granule(s).
#    
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------   
#           09/08/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "genMDL";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the input or output
# data transactions are missing.
# ===============================

  $input->{L4_C_DAILY} or return $eh->error(1,TYPE=>"L4_C_DAILY");
  $output->{MDL} or return $eh->error(2,TYPE=>"MDL");

# Create the MDL granule
# ======================

  my $tmp = $time->datetime;
  ($output->stat("MDL",CLOCK=>$time))[0] and return 1;

  my $metadata = $config->clone(COLLECTION_ID=>"MDL");

  getMDLInfo($time,$input,$metadata);
  $eh->isError() and return $eh->traceback(3);

  getMETInfo($time,$input,$metadata);
  $eh->isError() and return $eh->traceback(3);

  getMODInfo($time,$input,$metadata);
  $eh->isError() and return $eh->traceback(3);

  getSOCInfo($time,$input,$metadata);
  $eh->isError() and return $eh->traceback(3);

  getANCInfo($time,$input,$metadata);
  $eh->isError() and return $eh->traceback(3);

  getCLIMInfo($time,$input,$metadata);
  $eh->isError() and return $eh->traceback(3);

  getCRIDInfo($time, $output, $metadata);
  $eh->isError() and return $eh->traceback(3);

  genHDF($time, $input, $output, $metadata);
  $eh->isError() and return $eh->traceback(3);

  foreach my $key (sort keys %$metadata) {

    $key =~ /^SPL4CMDL_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^L4CMDL_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^L4CMET_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^GEOS5LFO_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^SMAP_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^SPL3SMA_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^SPL4SMGP_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^L4CMOD_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^L4CCLIM_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^L4CSOC_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^L4CANC_/ and print "$key: $metadata->{$key}\n";
    $key =~ /^MODFPAR_/ and print "$key: $metadata->{$key}\n";

 }

  insertGroupMeta($time, $output, $metadata);
  $eh->isError() and return $eh->traceback(3);

  insertConfig($time, $output, $metadata);
  $eh->isError() and return $eh->traceback(3);

# compressHDF($time, $output, $metadata);
# $eh->isError() and return $eh->traceback(3);

  insertXMLMeta($time, $output, $metadata);
  $eh->isError() and return $eh->traceback(3);

  insertSeriesXML($time, $output, $metadata);
  $eh->isError() and return $eh->traceback(3);

  addCFMeta($time, $output, $metadata);
  $eh->isError() and return $eh->traceback(3);

  return 1;
}

#******************************************************************************
sub getMDLInfo { CLOCK:    my $time   = shift;
                 DMGR:     my $input  = shift;
                 CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get Carbon Model Granule Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the L4_C carbon
# -------- model output file (L4CMDL). 
#
# Language: Perl
# ---------
#
# Notes: none
# ------
#
# See Also: DMGR.pm, CONFIG.pm, DTR.pm, CLOCK.pm, ERROR::Handler.pm,
# --------- METADATA.pm
#
# Prerequisites: none
# --------------
#
# Usage: $rc = getMDLInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG      OUT  CONFIG object reference to receive the
#                                        metadata. Existing content will be
#                                        replaced where the namespace overlaps.
#
#  {L4CMDL_FILE}                    OUT  Pathname of the L4CMDL file.
#  {L4CMDL_fileName}                OUT  Basename of the L4CMDL file.
#  {L4CMDL_version}                 OUT  Dataset version of the L4CMDL file.
#  {L4CMDL_creationDate}            OUT  Creation date of the L4CMDL file.
#  {L4CMDL_DOI}                     OUT  Digital object identifier of the L4CMDL
#                                        file.
#  {L4CMET_FILE}                    OUT  Pathname of L4CMET ancillary input file
#                                        generated by the l4c_met preprocessor.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred.
#                                        1: Data transaction file is missing.
#                                        2: L4CMDL input file is missing.
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/09/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getMDLInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if no data transaction
# for the carbon model.
# =============================

  $input->{L4_C_DAILY} or return $eh->error(1,type=>"L4_C_DAILY");

  my @files = $input->files("L4_C_DAILY");
  my ($mdl_file) = grep /\.h5$/, @files;

  -f $mdl_file or return $eh->error(2,FILE=>$mdl_file);

# Retrieve Information about the
# L4_C model file.
# ==============================

  MDL_FILE_NAMESPACE:

  my $ctime = (stat($mdl_file))[10];
  my $t     = gmtime($ctime);
  my $meta  = METADATA->new();
  my %meta  = $meta->h5dump("-g / " . $mdl_file);

  $config->{L4CMDL_FILE}     = $mdl_file;
  $config->{L4CMDL_fileName} = basename $mdl_file;
  $config->{L4CMDL_version}  = $meta{L4_C_SW_VERSION};
  $config->{L4CMDL_DOI}      = $meta{DOI};

  $config->{L4CMDL_creationDate} = $meta{L4_C_PRODUCTION_DATETIME};

# Add ancillary input filenames
# =============================

  $config->{L4CMET_FILE} = $meta{INPUTPOINTER_MET};
  $config->{L4CMOD_FILE} = $meta{INPUTPOINTER_FPAR};
  $config->{L4CSOC_FILE} = $meta{INPUTPOINTER_SOC};

# Add Quality Assurance Information
# =================================

  $config->{NEE_COMPLETENESS_OMISSION} = $meta{NEE_COMPLETENESS_OMISSION_VALUE};
  $config->{GPP_COMPLETENESS_OMISSION} = $meta{GPP_COMPLETENESS_OMISSION_VALUE};
  $config->{RH_COMPLETENESS_OMISSION}  = $meta{RH_COMPLETENESS_OMISSION_VALUE};
  $config->{SOC_COMPLETENESS_OMISSION} = $meta{SOC_COMPLETENESS_OMISSION_VALUE};
  $config->{EC_COMPLETENESS_OMISSION}  = $meta{EC_COMPLETENESS_OMISSION_VALUE};

  $config->{NEE_DOMAIN_CONSISTENCY} = $meta{NEE_DOMAIN_CONSISTENCY_VALUE};
  $config->{GPP_DOMAIN_CONSISTENCY} = $meta{GPP_DOMAIN_CONSISTENCY_VALUE};
  $config->{RH_DOMAIN_CONSISTENCY}  = $meta{RH_DOMAIN_CONSISTENCY_VALUE};
  $config->{SOC_DOMAIN_CONSISTENCY} = $meta{SOC_DOMAIN_CONSISTENCY_VALUE};
  $config->{EC_DOMAIN_CONSISTENCY}  = $meta{EC_DOMAIN_CONSISTENCY_VALUE};

  return 1;
}

#******************************************************************************
sub getMETInfo { CLOCK:    my $time   = shift;
                 DMGR:     my $input  = shift;
                 CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get Meteorology Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the L4_C carbon model
# -------- input file (L4CMET) generated by the l4c_met preprocessor.
#
# Language: Perl
# ---------
#
# Notes: 1. This method invokes additional methods that set metadata. Please
# ------    reference the additional methods (listed below) for a description
#           of the returned metadata parameters.
#
# See Also: DMGR.pm, CONFIG.pm, DTR.pm, CLOCK.pm, ERROR::Handler.pm,
# --------- METADATA.pm, getLFOInfo(), getGPHInfo(), getSMAPInfo()
#
# Prerequisite: getMDLInfo()
# -------------
#
# Usage: $rc = getMETInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG    INOUT  CONFIG object reference to receive the
#                                        metadata (see note-1). Existing
#                                        content will be replaced where the
#                                        namespace overlaps.
#
#  {L4CMET_FILE}                     IN  pathname of the L4CMET file.
#  {L4CMET_fileName}                OUT  basename of the L4CMET file.
#  {L4CMET_version}                 OUT  data set version of the L4CMET file.
#  {L4CMET_creationDate}            OUT  creation date of the L4CMET file.
#  {L4CMET_DOI}                     OUT  digital object identifier
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred
#                                        1: L4CMET file is missing or undef
#                                        2: External error encountered
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/08/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getMETInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the MET file is
# undefined or missing.
# =========================

  my $met_file = $config->{L4CMET_FILE};
  -f $met_file or return $eh->error(1,FILE=>$met_file);

# Retrieve Information about the
# L4_C MET file.
# ==============================

  MET_FILE_NAMESPACE:

  my $ctime = (stat($met_file))[10];
  my $t = gmtime($ctime);
  my $meta = METADATA->new();
  my %meta = $meta->h5dump("-g / " . $met_file);

  $config->{L4CMET_fileName} = basename $met_file;
  $config->{L4CMET_version} = $meta{L4_C_SW_VERSION};
  $config->{L4CMET_creationDate} = $meta{L4_C_PRODUCTION_DATETIME};
  $config->{L4CMET_DOI} = $meta{DOI};

# Extract information from the MET file
# pertaining to other source inputs.
# =====================================

  getLFOInfo($time, $input, $config);
  $eh->isError() and return $eh->traceback(2);

  getGPHInfo($time, $input, $config);
  $eh->isError() and return $eh->traceback(2);

  getSMAPInfo($time, $input, $config);
  $eh->isError() and return $eh->traceback(2);

  return 1;

}

#******************************************************************************
sub getSOCInfo { CLOCK:    my $time   = shift;
                 DMGR:     my $input  = shift;
                 CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get Soil Organic Carbon Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the soil orgranic
# -------- carbon input granule (L4CSOC).
#
# Language: Perl
# ---------
#
# Notes: none
# ------
#
# See Also: DMGR.pm, CONFIG.pm, DTR.pm, CLOCK.pm, ERROR::Handler.pm,
# --------- METADATA.pm
#
# Prerequisite: getMDLInfo()
# -------------
#
# Usage: $rc = getSOCInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG    INOUT  CONFIG object reference to receive the
#                                        metadata. Existing content will be
#                                        replaced where the namespace overlaps.
#
#  {L4CSOC_FILE}                     IN  pathname of the L4CSOC file.
#  {L4CSOC_fileName}                OUT  basename of the L4CSOC file.
#  {L4CSOC_version}                 OUT  data set version of the L4CSOC file.
#  {L4CSOC_creationDate}            OUT  creation date of the L4CSOC file.
#  {L4CSOC_DOI}                     OUT  digital object identifier of the
#                                        L4CSOC file.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred.
#                                        1: L4CSOC file is missing or undefined.
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/08/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getSOCInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the SOC file is
# undefined or missing.
# =========================

  my $soc_file = $config->{L4CSOC_FILE};
  -f $soc_file or return $eh->error(1,FILE=>$soc_file);

# Retrieve Information about the
# L4_C SOC file.
# ==============================

  SOC_FILE_NAMESPACE:

  my $ctime = (stat($soc_file))[10];
  my $t = gmtime($ctime);
  my $meta = METADATA->new();

  $config->{L4CSOC_fileName} = basename $soc_file;
  $config->{L4CSOC_version} = $meta->h5dump("-a L4_C_SW_VERSION " . $soc_file);
  $config->{L4CSOC_creationDate} = $t->datetime . ".000Z";
  $config->{L4CSOC_DOI} = $meta->h5dump("-a DOI " . $soc_file);

  return 1;

}

#******************************************************************************
sub getANCInfo { CLOCK:    my $time   = shift;
                 DMGR:     my $input  = shift;
                 CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get Ancillary File Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the L4_C Ancillary
# -------- input file (L4CANC).
#
# Language: Perl
# ---------
#
# Notes: none
# ------
#
# See Also: DMGR.pm, CONFIG.pm, DTR.pm, CLOCK.pm, ERROR::Handler.pm,
# --------- METADATA.pm
#
# Prerequisite: getMDLInfo()
# -------------
#
# Usage: $rc = getANCInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG    INOUT  CONFIG object reference to receive the
#                                        metadata. Existing content will be
#                                        replaced where the namespace overlaps.
#
#  {L4CANC_FILE}                     IN  Pathname of the L4CANC file.
#  {L4CANC_fileName}                OUT  Basename of the L4CANC file.
#  {L4CANC_version}                 OUT  Data set version of the L4CANC file.
#  {L4CANC_creationDate}            OUT  Creation date of the L4CANC file.
#  {L4CANC_DOI}                     OUT  Digital object identifier
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred
#                                        1: L4CANC file is missing or undef
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/09/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getANCInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the climatology file
# is undefined or missing.
# ==============================

########################################
# This is a temporary query until
# L4_C metadata is augmented with the
# name of the file.

  my $dtr = $input->{ANC};
  my @files = $dtr->files();
  my ($anc_file) = grep /\.h5$/, @files;
########################################

# my $anc_file = $config->{L4CANC_FILE};
  -f $anc_file or return $eh->error(1,FILE=>$anc_file);

# Retrieve Information about the
# L4CANC file.
# ==============================

  L4CANC_FILE_NAMESPACE:

  my $ctime = (stat($anc_file))[10];
  my $t = gmtime($ctime);
  my $meta = METADATA->new();
  my %meta = $meta->h5dump("-g / " . $anc_file);

  $config->{L4CANC_fileName}     = basename $anc_file;
  $config->{L4CANC_version}      = $meta{L4_C_SW_VERSION};
  $config->{L4CANC_creationDate} = $t->datetime . ".000Z";
  $config->{L4CANC_DOI}          = $meta{DOI};

  return 1;

}

#******************************************************************************
sub getCLIMInfo { CLOCK:    my $time   = shift;
                  DMGR:     my $input  = shift;
                  CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get Meteorology Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the L4_C FPAR 
# -------- climatology input file (L4CCLIM).
#
# Language: Perl
# ---------
#
# Notes: none
# ------
#
# See Also: DMGR.pm, CONFIG.pm, DTR.pm, CLOCK.pm, ERROR::Handler.pm,
# --------- METADATA.pm
#
# Prerequisite: getMDLInfo()
# -------------
#
# Usage: $rc = getCLIMInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG    INOUT  CONFIG object reference to receive the
#                                        metadata. Existing content will be
#                                        replaced where the namespace overlaps.
#
#  {L4CCLIM_FILE}                    IN  Pathname of the L4CCLIM file.
#  {L4CCLIM_fileName}               OUT  Basename of the L4CCLIM file.
#  {L4CCLIM_version}                OUT  Data set version of the L4CCLIM file.
#  {L4CCLIM_creationDate}           OUT  Creation date of the L4CCLIM file.
#  {L4CCLIM_DOI}                    OUT  Digital object identifier
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred
#                                        1: L4CCLIM file is missing or undef
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/09/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getCLIMInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the climatology file
# is undefined or missing.
# ==============================

########################################
# This is a temporary query until
# L4_C metadata is augmented with the
# name of the file.

  my $dtr = $input->{FPAR_CLIMATOLOGY};
  my ($clim_file) = $dtr->files();
########################################

# my $clim_file = $config->{L4CCLIM_FILE};
  -f $clim_file or return $eh->error(1,FILE=>$clim_file);

# Retrieve Information about the
# L4CCLIM file.
# ==============================

  L4CCLIM_FILE_NAMESPACE:

  my $ctime = (stat($clim_file))[10];
  my $t = gmtime($ctime);
  my $meta = METADATA->new();
  my %meta = $meta->h5dump("-g / " . $clim_file);

  $config->{L4CCLIM_fileName}     = basename $clim_file;
  $config->{L4CCLIM_version}      = $meta{dataset_version};
  $config->{L4CCLIM_creationDate} = $t->datetime . ".000Z";
  $config->{L4CCLIM_DOI}          = $meta{DOI};

  return 1;

}

#******************************************************************************
sub getLFOInfo { CLOCK:    my $time   = shift;
                 DMGR:     my $input  = shift;
                 CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get Land Forcing (LFO) Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the GEOS-5 LFO files
# -------- (GEOS5LFO) used by the carbon model.
#
# Language: Perl
# ---------
#
# Notes: 1. GEOS5 filenames are extracted from the L4CMET input file
# ------    generated by the carbon model preprocessor, l4c_met.
#
#        2. This method is invoked by getMETinfo().
#
# See Also: CLOCK.pm, DMGR.pm, CONFIG.pm, METADATA.pm, ERROR::Handler.pm,
# --------- getMETinfo()
#
# Prerequisites: getMDLinfo()
# --------------
#
# Usage: $rc = getLFOInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG    INOUT  CONFIG object reference to receive the
#                                        metadata. Existing content will be
#                                        replaced where the namespace overlaps.
#
#  {L4CMET_FILE}                     IN  pathname of the L4CMET file.
#  {GEOS5LFO_FILE}                  OUT  pathname of the most recent GEOS-5 LFO
#                                        input file.
#  {GEOS5LFO_fileName}              OUT  basename(s) of GEOS5LFO input files.
#  {GEOS5LFO_version}               OUT  dataset version(s) of the GEOS5LFO
#                                        input files.
#  {GEOS5LFO_creationDate}          OUT  creation date(s) of the GEOS5LFO
#                                        input files.
#  {GEOS5LFO_DOI}                   OUT  digital object identifier(s) of the
#                                        GEOS5LFO input files.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred.
#                                        1: L4CMET file is missing or undefined.
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/08/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getLFOInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the MET file is
# undefined or missing.
# =========================

  my ($met_file) = $config->{L4CMET_FILE};
  -f $met_file or return $eh->error(1,FILE=>$met_file);

# Retrieve the filenames of the GEOS-5
# LFO files.
# ====================================

  my $meta = METADATA->new();

  my %hash = $meta->h5dump("-g / " . $met_file);
  my @keys  = grep /L4C_MET_INPUTPOINTER_GEOS_FP/, keys %hash;
  my @array = sort @hash{@keys};

# Retrieve the metadata from each
# LFO file.
# ===============================

  my ($lfo_fileName, $lfo_creationDate);
  my ($lfo_version, $lfo_DOI);

  foreach my $pathname (@array) {
    
    my $name         = basename $pathname;
    my $creationDate = $meta->h5dump("-a ProductionDateTime " . $pathname);

    if ($creationDate) {
      $creationDate = (split /generated:/, $creationDate)[1];
      my $t = Time::Piece->strptime($creationDate, " %a %b %e %H:%M:%S %Y GMT");
      $creationDate = $t->datetime . ".000Z";
    }

    my $version      = $meta->h5dump("-a VersionID " . $pathname);
    my $DOI          = $meta->h5dump("-a DOI " . $pathname);

    $lfo_fileName     = append([$lfo_fileName,$name]);
    $lfo_creationDate = append([$lfo_creationDate,$creationDate]);
    $lfo_version      = append([$lfo_version, $version]);
    $lfo_DOI          = append([$lfo_DOI, $DOI]);

  }

  GEOS5_LFO_NAMESPACE:

  $config->{GEOS5LFO_FILE}         = $array[-1];
  $config->{GEOS5LFO_fileName}     = $lfo_fileName;
  $config->{GEOS5LFO_creationDate} = $lfo_creationDate;
  $config->{GEOS5LFO_version}      = $lfo_version;
  $config->{GEOS5LFO_DOI}          = $lfo_DOI;

}
#******************************************************************************
sub getGPHInfo { CLOCK:    my $time   = shift;
                 DMGR:     my $input  = shift;
                 CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get SMAP Level-4 Soil Moisture Geophysical Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the SMAP Level-4
# -------- soil moisture geophysical collection (SPL4SMGP) files used by the 
#          carbon model.
#
# Language: Perl
# ---------
#
# Notes: 1. SPL4SMGP filenames are extracted from the L4CMET file generated
# ------    by the carbon model preprocessor, l4c_met.
#
#        2. This method is invoked by getMETinfo().
#
# See Also: CLOCK.pm, DMGR.pm, CONFIG.pm, METADATA.pm, ERROR::Handler.pm,
# --------- getMETinfo()
#
# Prerequisites: getMDLinfo()
# --------------
#
# Usage: $rc = getGPHInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG    INOUT  CONFIG object reference to receive the
#                                        metadata. Existing content will be
#                                        replaced where the namespace overlaps.
#
#  {L4CMET_FILE}                     IN  pathname of the L4CMET file.
#  {SPL4SMGP_FILE}                  OUT  pathname of the most recent SPL4SMGP
#                                        input file.
#  {SPL4SMGP_fileName}              OUT  basename(s) of SPL4SMGP input files.
#  {SPL4SMGP_version}               OUT  dataset version(s) of the SPL4SMGP
#                                        input files.
#  {SPL4SMGP_creationDate}          OUT  creation date(s) of the SPL4SMGP
#                                        input files.
#  {SPL4SMGP_DOI}                   OUT  digital object identifier(s) of the
#                                        SPL4SMGP input files.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred
#                                        1: L4CMET file is missing or undefined
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/08/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getGPHInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the MET file is
# undefined or missing.
# =========================

  my ($met_file) = $config->{L4CMET_FILE};
  -f $met_file or return $eh->error(1,FILE=>$met_file);

# Retrieve the filenames of the L4_SM
# GPH files.
# ===================================

  my $meta = METADATA->new();

  my %hash = $meta->h5dump("-g / " . $met_file);
  my @keys  = grep /L4C_MET_INPUTPOINTER_L4_SM/, keys %hash;
  my @array = sort @hash{@keys};

# Retrieve the metadata from each
# SPL4SMGP file.
# ===============================

  my $group_dataset = "/Metadata/DatasetIdentification";
  my $group_series  = "/Metadata/SeriesIdentification";
  my ($gph_fileName, $gph_creationDate);
  my ($gph_version, $gph_DOI);

  foreach my $pathname (@array) {
    
    my $name   = basename $pathname;
    my %dset   = $meta->h5dump("-g $group_dataset " . $pathname);
    my %series = $meta->h5dump("-g $group_series  " . $pathname);

    $gph_fileName     = append([$gph_fileName, $name]);
    $gph_creationDate = append([$gph_creationDate, $dset{creationDate}]);
    $gph_version      = append([$gph_version, $dset{CompositeReleaseID}]);
    $gph_DOI          = append([$gph_DOI, $series{identifier_product_DOI}]);

  }

  L4_SM_GPH_NAMESPACE:

  $config->{SPL4SMGP_FILE}         = $array[-1];
  $config->{SPL4SMGP_fileName}     = $gph_fileName;
  $config->{SPL4SMGP_creationDate} = $gph_creationDate;
  $config->{SPL4SMGP_version}      = $gph_version;
  $config->{SPL4SMGP_DOI}          = $gph_DOI;

}

#******************************************************************************
sub getSMAPInfo { CLOCK:    my $time   = shift;
                  DMGR:     my $input  = shift;
                  CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get SMAP Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the SMAP Level-3
# -------- soil moisture active (SPL3SMA) input granule.
#
# Language: Perl
# ---------
#
# Notes: 1. SPL3SMA filenames are extracted from the L4CMET file generated
# ------    by the carbon model preprocessor, l4c_met.
#
#        2. This method is invoked by getMETinfo().
#
# See Also: CLOCK.pm, DMGR.pm, CONFIG.pm, METADATA.pm, ERROR::Handler.pm,
# --------- getMETinfo()
#
# Prerequisites: getMDLinfo()
# --------------
#
# Usage: $rc = getSMAPInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG    INOUT  CONFIG object reference to receive the
#                                        metadata. Existing content will be
#                                        replaced where the namespace overlaps.
#
#  {L4CMET_FILE}                     IN  pathname of the L4CMET file.
#
#  {SPL3SMA_FILE}                   OUT  pathname of the most recent SPL3SMA 
#                                        input file.
#
#  {SPL3SMA_fileName}               OUT  basename of SPL3SMA input file.
#
#  {SPL3SMA_version}                OUT  dataset version of the SPL3SMA 
#                                        input file. See also:
#                                        {SMAP_CompositeReleaseID}.
#
#  {SPL3SMA_creationDate}           OUT  creation date of the SPL3SMA input
#                                        file.
#
#  {SPL3SMA_DOI}                    OUT  digital object identifier of the
#                                        SPL3SMA input files.
#
#  {SMAP_CompositeReleaseID}        OUT  Composite release ID of the SPL3SMA
#                                        input file.
#
#  {SMAP_creationDate}              OUT  Creation date of the SPL3SMA
#                                        input file.
#
#  {SMAP_identifier_product_DOI}    OUT  The SPL3SMA product digital object
#                                        identifier.
#
#  {SMAP_platformDocument_
#                 publicationDate}  OUT  The date of publication of the
#                                        document that describes the SMAP
#                                        platform, if available to the general
#                                        public.
#
#  {SMAP_platformDocument_edition}  OUT  The edition of publication of the
#                                        document that describes the SMAP
#                                        platform, if available to the general
#                                        public.
#
#  {SMAP_platformDocument_title}    OUT  The title of the publication of the
#                                        document that describes the SMAP
#                                        platform, if available to the general
#                                        public.
#
#  {SMAP_radarDocument_
#                 publicationDate}  OUT  The date of publication of the
#                                        document that describes the SMAP
#                                        radar instrument, if available to the
#                                        general public.
#
#
#  {SMAP_radarDocument_edition}     OUT  The edition of publication of the
#                                        document that describes the SMAP
#                                        radar instrument, if available to the
#                                        general public.
#
#  {SMAP_radarDocument_title}       OUT  The title of the publication of the
#                                        document that describes the SMAP radar
#                                        instrument, if available to the
#                                        general public.
#
#  {SMAP_radiometerDocument_
#                 publicationDate}  OUT  The date of publication of the
#                                        document that describes the SMAP
#                                        radiometer instrument, if available to
#                                        the general public.
#
#  {SMAP_radiometerDocument_
#                      edition}     OUT  The edition of publication of the
#                                        document that describes the SMAP
#                                        radiometer instrument, if available to
#                                        the general public.
#
#  {SMAP_radiometerDocument_title}  OUT  The title of the publication of the
#                                        document that describes the SMAP
#                                        radiometer instrument, if available to
#                                        the general public.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler referent.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred
#                                        1: L4CMET file is missing or undefined
#                                        2: SPL3SMA file is missing or undef
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/02/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getSMAPInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the MET file is
# undefined or missing.
# =========================

  my ($met_file) = $config->{L4CMET_FILE};
  -f $met_file or return $eh->error(1,FILE=>$met_file);

# Retrieve the filename of the SMAP
# L3_SM_A file. Return if missing.
# =================================

  my %meta;
  my $meta = METADATA->new();

# Retrieve metadata information from
# the SMAP L3_SM_A file.
# ==================================

  my $l3_file = $meta->h5dump("-a L4C_MET_INPUTPOINTER_L3_SM_A " . $met_file);

  -s $l3_file and do {

  DATASET_IDENTIFICATION:

  %meta = $meta->h5dump("-g Metadata/DatasetIdentification " . $l3_file);
  $config->{SMAP_CompositeReleaseID} = $meta{CompositeReleaseID};
  $config->{SMAP_creationDate} = $meta{creationDate};

  SERIES_IDENTIFICATION:

  %meta = $meta->h5dump("-g Metadata/SeriesIdentification " . $l3_file);
  $config->{SMAP_identifier_product_DOI} = $meta{identifier_product_DOI};

  L3_SM_A_NAMESPACE:

  $config->{SPL3SMA_FILE}         = $l3_file;
  $config->{SPL3SMA_fileName}     = basename $l3_file;
  $config->{SPL3SMA_creationDate} = $config->{SMAP_creationDate};
  $config->{SPL3SMA_version}      = $config->{SMAP_CompositeReleaseID};
  $config->{SPL3SMA_DOI}          = $config->{SMAP_identifier_product_DOI};

  };

# Get the SMAP documentation information from
# the L4_SM_GPH granule since the L3 granule
# may not be available.
# ============================================

  my $l4_file = $config->{SPL4SMGP_FILE};

  PLATFORM_DOCUMENT:

  %meta = $meta->h5dump("-g Metadata/AcquisitionInformation/platformDocument " . $l4_file);

  $config->{SMAP_platformDocument_publicationDate} = $meta{publicationDate};
  $config->{SMAP_platformDocument_edition} = $meta{edition};
  $config->{SMAP_platformDocument_title} = $meta{title};

  RADAR_DOCUMENT:

  %meta = $meta->h5dump("-g Metadata/AcquisitionInformation/radarDocument " . $l4_file);

  $config->{SMAP_radarDocument_publicationDate} = $meta{publicationDate};
  $config->{SMAP_radarDocument_edition} = $meta{edition};
  $config->{SMAP_radarDocument_title} = $meta{title};

  RADIOMETER_DOCUMENT:

  %meta = $meta->h5dump("-g Metadata/AcquisitionInformation/radiometerDocument " . $l4_file);

  $config->{SMAP_radiometerDocument_publicationDate} = $meta{publicationDate};
  $config->{SMAP_radiometerDocument_edition} = $meta{edition};
  $config->{SMAP_radiometerDocument_title} = $meta{title};

}

#******************************************************************************
sub getMODInfo { CLOCK:    my $time   = shift;
                 DMGR:     my $input  = shift;
                 CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get MODIS Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the L4_C carbon model
# -------- input file (L4CMOD) generated by the l4c_modis preprocessor.
#
# Language: Perl
# ---------
#
# Notes: 1. This method invokes additional methods that set metadata. Please
# ------    reference the additional methods (listed below) for a description
#           of the returned metadata parameters.
#
# See Also: DMGR.pm, CONFIG.pm, DTR.pm, CLOCK.pm, ERROR::Handler.pm,
# --------- METADATA.pm, getFPARInfo()
#
# Prerequisites: getMDLInfo()
# --------------
#
# Usage: $rc = getMODInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG    INOUT  CONFIG object reference to receive the
#                                        metadata (see note-1). Existing
#                                        content will be replaced where the
#                                        namespace overlaps.
#
#  {L4CMOD_FILE}                     IN  pathname of the L4CMOD file.
#  {L4CMOD_fileName}                OUT  basename of the L4CMOD file.
#  {L4CMOD_version}                 OUT  data set version of the L4CMOD file.
#  {L4CMOD_creationDate}            OUT  creation date of the L4CMOD file.
#  {L4CMOD_DOI}                     OUT  digital object identifier
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred
#                                        1: L4CMOD file is missing or undef
#                                        2: External error encountered
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/11/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getMODInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the MOD file is
# undefined or missing.
# =========================

  my ($mod_file) = $config->{L4CMOD_FILE};
  -f $mod_file or return $eh->warning(1,FILE=>$mod_file);

# Retrieve Information about the
# L4_C MOD file.
# ==============================

  MOD_FILE_NAMESPACE:

  my $ctime = (stat($mod_file))[10];
  my $t = gmtime($ctime);
  my $meta = METADATA->new();

  $config->{L4CMOD_FILE} = $mod_file;
  $config->{L4CMOD_fileName} = basename $mod_file;
  $config->{L4CMOD_version} = $meta->h5dump("-a L4CMOD_SW_VERSION " . 
                                                                    $mod_file);
# $config->{L4CMOD_creationDate} = $t->datetime . ".000Z";
  $config->{L4CMOD_creationDate} = $meta->h5dump("-a L4CMOD_PRODUCTION_DATETIME " .  $mod_file);

# $config->{L4CMOD_creationDate} =~ s/Z$/\.000Z/;
  $config->{L4CMOD_DOI} = $meta->h5dump("-a L4_C_MDL_DOI " . $mod_file);

# Extract information from the MOD file
# pertaining to other source inputs.
# =====================================

  getFPARInfo($time, $input, $config);
  $eh->isError() and return $eh->traceback(2);

  return 1;
}

#******************************************************************************
sub getFPARInfo { CLOCK:    my $time   = shift;
                  DMGR:     my $input  = shift;
                  CONFIG:   my $config = shift;
#******************************************************************************
# English Name: Get FPAR Information
# -------------
#
# Purpose: Extracts pertinent metadata information from the MODIS FPAR files
# -------- (MODFPAR) listed in the MODIS ancillary file (L4CMOD) that is
#          used by the carbon model.
#
# Language: Perl
# ---------
#
# Notes: 1. MODIS FPAR filenames are extracted from the L4CMOD input file
# ------    generated by the carbon model preprocessor, l4c_mod.
#
#        2. This method assumes that the MODIS FPAR file metadata is stored
#           in the standard portion of the metadata written out as part of the
#           EOSDIS Core System - "CoreMetadata.0" and "ArchiveMetadata.0"
#           blocks, as HDF global file level character attributes. Entries are
#           expected to be a series of Value Language (ODL/PVL) stanzas. See
#
#           "User's Guide FPAR, LAI (ESDT: MOD15A2) 8-day Composite NASA MODIS
#           Land Algorithm"
#
#           for more information. See also METADATA::ncdump().
#
#        3. This method is invoked by getMODinfo().
#
# See Also: CLOCK.pm, DMGR.pm, CONFIG.pm, METADATA.pm, ERROR::Handler.pm,
# --------- getMODinfo()
#
# Prerequisites: getMDLinfo()
# --------------
#
# Usage: $rc = getFPARInfo($time,$input,$config);
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object reference set to the
#                                        date/time of the desired information.
#
# $input                  DMGR       IN  DMGR object reference describing
#                                        all input data generated by the carbon
#                                        model.
#
# $config               CONFIG    INOUT  CONFIG object reference to receive the
#                                        metadata. Existing content will be
#                                        replaced where the namespace overlaps.
#
#  {L4CMOD_FILE}                     IN  pathname of the L4CMOD file.
#  {MODFPAR_FILE}                   OUT  pathname of the most recent MODFPAR
#                                        input file.
#  {MODFPAR_fileName}               OUT  basename(s) of MODFPAR input files.
#  {MODFPAR_version}                OUT  dataset version(s) of the MODFPAR
#                                        input files.
#  {MODFPAR_creationDate}           OUT  creation date(s) of the MODFPAR
#                                        input files.
#  {MODFPAR_DOI}                    OUT  digital object identifier(s) of the
#                                        MODFPAR input files.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler object reference.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        0: No exception occurred.
#                                        1: L4CMOD file is missing or undefined.
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           09/11/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "getFPARInfo";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Return if the MOD file is
# undefined or missing.
# =========================

  my ($mod_file) = $config->{L4CMOD_FILE};
  -f $mod_file or return $eh->error(1,FILE=>$mod_file);

# Retrieve the filenames of the
# MODIS FPAR files.
# =============================

  my $meta  = METADATA->new();
  my %hash  = $meta->h5dump("-g / " . $mod_file);
  my @keys  = grep /INPUTPOINTER_MODIS/, keys %hash;
  my @array = sort @hash{@keys};
  my @keys_viirs  = grep /INPUTPOINTER_FPAR/, keys %hash;
  my @array_viirs = sort @hash{@keys_viirs};

  push (@array, @array_viirs);

# Retrieve the metadata from each
# MODIS FPAR file.
# ===============================

  my ($fpar_fileName, $fpar_creationDate);
  my ($fpar_version, $fpar_DOI);

  foreach my $pathname (@array) {
    
    my %info = $meta->ncdump("-g ECSDATAGRANULE -t fpar " . $pathname);
    my $viirs_id = $meta->h5dump("-a VersionID " . $pathname);
    my $viirs_prodtime = $meta->h5dump("-a ProductionTime " . $pathname);

    $viirs_prodtime =~ s/Z$/\.000Z/;
    $viirs_prodtime =~ s/ /T/;

    my $name         = basename $pathname;
    my $creationDate = $info{PRODUCTIONDATETIME} // $viirs_prodtime;
    my $version      = $info{LOCALVERSIONID} // $viirs_id;
    my $DOI          = $info{DOI};

    $fpar_fileName     = append([$fpar_fileName,$name]);
    $fpar_creationDate = append([$fpar_creationDate,$creationDate]);
    $fpar_version      = append([$fpar_version, $version]);
    $fpar_DOI          = append([$fpar_DOI, $DOI]);

  }

  MODIS_FPAR_NAMESPACE:

  $config->{MODFPAR_FILE}         = $array[-1];
  $config->{MODFPAR_fileName}     = $fpar_fileName;
  $config->{MODFPAR_creationDate} = $fpar_creationDate;
  $config->{MODFPAR_version}      = $fpar_version;
  $config->{MODFPAR_DOI}          = $fpar_DOI;

}

#******************************************************************************
sub append { my $array = shift;
             my %options = scalar(@_) ? @_ : ();
#******************************************************************************

  my @array = @$array;
  my $delimiter = $options{DELIMITER} // "','";
  my $default = $options{DEFAULT} // "missing";

  shift @array if ! defined $array[0];
  @array or return undef;

  @array = map { defined $_ ? $_ : $default } @array;

  return join $delimiter, @array;

}

#******************************************************************************
sub getRunTimeConfig
#******************************************************************************
# English Name: Get Run-Time Configuration
# -------------
#
# Purpose: 
# --------
#
# Language: Perl
# ---------
#
# Notes:
# ------
#
# Interface:              Type   Access  Description
# ----------                     Intent
#    
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------   
#           mm/dd/ccyy      J.Ardizzone  created.
#******************************************************************************
{

# Retrieve command-line arguments
# ===============================

  my %option = getArgs();

  my $dictionary      = $option{OP_DEFINE};
  $option{DICTIONARY} = $dictionary;

# Set key parameters
# ==================

  $option{NAME}  = "SMAP_L4_OPS";
  $option{CLASS} = "L4_C_genISO";

  $option{DATE} = $option{OP_DATE};
  $option{TIME} = 0;

# Derive key parameters
# =====================

  $option{L4_C_ROOT}    = $option{OP_STREAM_DIR};

  $option{L4_C_PATH}    = File::Spec->catdir($option{L4_C_ROOT}, "bin");
  $option{L4_C_GEN_ISO} = File::Spec->catdir($option{L4_C_ROOT}, "genISO");
  $option{L4_C_IMPORT}  = File::Spec->catdir($option{L4_C_ROOT}, "import");
  $option{L4_C_MODEL}   = File::Spec->catdir($option{L4_C_ROOT}, "run_DAILY");
  $option{L4_C_INPUT}   = File::Spec->catdir($option{L4_C_MODEL}, "output");
  $option{L4_C_OUTPUT}  = File::Spec->catdir($option{L4_C_GEN_ISO},"output");
  $option{L4_C_MET}     = File::Spec->catdir($option{L4_C_ROOT}, "run_MET");
  $option{L4_C_MODIS}   = File::Spec->catdir($option{L4_C_ROOT}, "run_MODIS");
  $option{L4_C_DAILY}   = File::Spec->catdir($option{L4_C_ROOT}, "run_DAILY");
  $option{L4_C_RUN}     = File::Spec->catdir($option{L4_C_GEN_ISO}, "run");
  $option{L4_C_RIP}     = File::Spec->catdir($option{L4_C_GEN_ISO}, "rip");

  $option{PRODUCT_COUNTER} = substr($option{OP_PRODUCT_COUNTER}+1000, 1);

  my $log_file         = File::Spec->catdir($option{L4_C_ROOT}, "log");
  $ENV{L4_LOG_FILE}    = $ENV{L4_LOG_FILE} // $log_file;
  $ENV{L4_C_AUGMENT}   = 1;
  $option{L4_LOG_FILE} = $ENV{L4_LOG_FILE};

  $ENV{PATH} = join ":", $option{L4_C_PATH}, $ENV{PATH};

  my $lh = LOG::Handler->new(SYSTEM=>"L4_C_SPS",
                             APPLICATION=>"L4_C_genISO",
                             DATE=>$option{DATE},
                             TIME=>$option{TIME});

# Return the run-time configuration
# =================================

  my $config = CONFIG->new($option{L4_C_GEN_ISO},%option);

  return $config;
}

#******************************************************************************
sub getArgs
#******************************************************************************
# English Name: Get Arguments
# -------------
#
# Purpose: Retrieves command-line arguments and options. 
# --------
#
# Language: Perl
# ---------
#
# Notes: 1. The environment variable, SMAP_OPS_DIR, must be defined if the
# ------    stream to be processed is identified by its type and name only
#           (i.e. the full pathname is not specified as a command-line
#           argument).
#
# See Also: getRunTimeConfig()
# ---------
#
# Prerequisites: $ENV{SMAP_OPS_DIR}
# --------------
#
# Usage: %options = getArgs()
# ------ $rc = $eh->isError()
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# %options                HASH      OUT  Hash table of returned command-line
#                                        options.
#
#  {OP_FORCE}          boolean      OUT  Forces processing to continue even
#                                        if some secondard inputs are
#                                        incomplete or unavailable.
#  
#  {OP_PROD_COUNTER}   integer      OUT  Product counter expressed as a 3-digit
#                                        integer (default: 001).
#
#  {OP_RUN_FREQ}       integer      OUT  Run frequency in seconds. This is the
#                                        interval of time between invocation
#                                        of this application (default: 3600).
#
#  {OP_STREAM_NAME}     string      OUT  Name of the stream to be processed
#                                        (e.g. SPL4C_V05005).
#  
#  {OP_STREAM_TYPE}     string      OUT  Name of the stream type to be
#                                        processed (e.g. SPL4C).
#
#  {OP_RESUME}         boolean      OUT  Resume post-model processing. This
#                                        option is useful when errors
#                                        occur in post-processing and cause
#                                        a premature exit.
#
#  {STREAM_DIR}         string      OUT  Pathname of the stream directory. This
#                                        can be specified on the command-line
#                                        or can be derived from the stream
#                                        type and name options in combination
#                                        with the environment variable:
#
#                                        SMAP_OPS_DIR
#
# $eh           ERROR::Handler      OUT  Error handler object.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        1: Unable to identify stream directory
#                                        2: Stream directory does not exist
#                                        3: Help on usage requested
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------   
#           11/03/2014      J.Ardizzone  created.
#******************************************************************************
{

  my %options = ();
  my %define  = ();
  my ($crid, $date, $force, $help, $idle, $man, $noHDF, $pc);
  my ($resume, $run_freq, $stream_name, $stream_type, $clim);


# Retrieve command-line options
# =============================

  GetOptions ("help|h" => \$help,
              "man" => \$man,
              "crid" => \$crid,
              "date=i" => \$date,
              "define=s" => \%define,
              "force|f" => \$force,
              "idle=i" => \$idle,
              "noHDF" => \$noHDF,
              "clim" => \$clim,
              "pc=i" => \$pc,
              "resume" => \$resume,
              "run_freq|rf=i" => \$run_freq,
              "stream_name|sn=s" => \$stream_name,
              "stream_type|st=s" => \$stream_type) or pod2usage(2);

  my @path = File::Spec->splitdir( $ARGV[0] );

  $options{OP_FORCE}           = $force;
  $options{OP_DEFINE}          = \%define;
  $options{OP_PRODUCT_COUNTER} = $pc // 1;
  $options{OP_DATE}            = $date // $ARGV[1];
  $options{OP_CRID}            = $crid;

  $options{OP_STREAM_NAME}  = $stream_name // pop @path;
  $options{OP_STREAM_TYPE}  = $stream_type // pop @path;
  $options{OP_STREAM_DIR}   = $ARGV[0] // File::Spec->catdir($ENV{SMAP_OPS_DIR},
                                          $options{OP_STREAM_TYPE},
                                          $options{OP_STREAM_NAME});

  $help and pod2usage(1);
  $man  and pod2usage(-verbose => 2);

  -d $options{OP_STREAM_DIR} or do {
    print "The stream directory does not exist. Please check arguments.\n";
    exit 1;
  };

  return %options;

}

#******************************************************************************
sub getCRIDInfo { CLOCK:  my $time = shift;
                  DMGR:   my $output = shift;
                  CONFIG: my $config = shift;
#******************************************************************************

  my %old = fgetCRIDInfo($time, $output, $config);
  my %new = cgetCRIDInfo($config);

  foreach my $key (keys %new) { print "CRID Config: $key = $new{$key}\n" }

  %old = %new if ! %old;

  my $meta = METADATA->new();
  my %changeLog = $meta->update(\%old,\%new);

  @{$config}{keys %new} = values %new;
  $config->{changeLog} = \%changeLog;

}

sub cgetCRIDInfo { CONFIG: $config = shift;

  my $root = $config->{L4_C_ROOT};
  my $collection_id = $config->{COLLECTION_ID};

# Retrieve the current/new
# state of the CRID parameters.
# =============================

  my %crid;
  my @keys;
  my ($path, $pathname);
  my $meta = METADATA->new();

  $path = File::Spec->catdir($root, "crid", $collection_id);
  CONFIG: my $cfg = CONFIG->new($path,%$config);

  $pathname = File::Spec->catfile($root, "crid", "config");
  @keys = $cfg->keys($pathname);

  $pathname = File::Spec->catfile($root, "crid", $collection_id, "config");
  push @keys, $cfg->keys($pathname);

  @crid{@keys} = @{$cfg}{@keys};
  %crid = $meta->execute(%crid);

  return %crid;
}

sub fgetCRIDInfo { CLOCK:  my $time = shift;
                   DMGR:   my $output = shift;
                   CONFIG: my $config = shift;

  my $id   = $config->{COLLECTION_ID};
  my $file = (findLastFile($time,$output->{MDL},$config))[1];

  print "Last MDL File: $file\n";

  $config->{SPL4C_FILE} = $file;

  METADATA: my (%meta, %crid);
  METADATA: my $meta = METADATA->new();

  %meta = $meta->h5dump("-g Metadata/CRID/Root " . $file);
  @crid{keys %meta} = values %meta;

  %meta = $meta->h5dump("-g Metadata/CRID/$id " . $file);
  @crid{keys %meta} = values %meta;

  return %crid;

}

#******************************************************************************
sub findLastFile { CLOCK:  my $time = shift;
                   DTR:    my $dtr = shift;
                   CONFIG: my $config = shift;
#******************************************************************************
# English Name: Find Last File
# -------------
#
# Purpose: Looks for the most recent file for the granule type described by
# -------- the input data transaction.
#
# Language: Perl
# ---------
#
# Notes: 1. The purpose of this method is to find the file with the latest
# ------    composite release ID (CRID). This file will be the last file
#           produced in the simplest scenario. However, the logic becomes
#           slightly more complicated when there are multiple processing 
#           instances for the same date/time (i.e. there are files with a
#           product counter greater than one). In this case, the CRID will
#           start with the value assigned to the file with the largest
#           product counter matching the first data day/time searched using this
#           method. Subsequent searches will then yield the last file created.
#
# See Also: CLOCK.pm, DTR.pm, CONFIG.pm, METADATA.pm
# ---------
#
# Prerequisites:
# --------------
#
# Usage: ($t_create, $file) = findLastFile($time, $dtr, $config);
# ------ @result = findLastFile($time, $dtr, $config);
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK object defining the current data
#                                        day and time. 
#
# $dtr                     DTR       IN  DTR object describing the file 
#                                        attributes to be searched. 
#
# $config               CONFIG       IN  CONFIG object describing all runtime
#                                        configuration parameters.
#
# $t_create              CLOCK      OUT  Creation time of the most recent file
#                                        described by the input data transaction
#                                        object (see note-1). 
#
# $file                 string      OUT  Filename of the most recent file.
#
# @result                ARRAY      OUT  Array containing the returned values.
#                                        A value of null is returned if no
#                                        file is located.
#    
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------   
#           06/26/2015      J.Ardizzone  Documented
#******************************************************************************

  my $meta = METADATA->new();

  my ($template) = $dtr->files({FILE_TYPE=>"SCIENCE"});
  $template      =~ s/_\d{3}\.h5/_\*\.h5/;

# Locate the last file. A metadata search for the
# CRID is used as a mechanism for verifying that
# the HDF-5 file is valid.
# ================================================

  for (my $t=$time-86400; $t>=$time-259200; $t-=86400) {

    my $files  = $config->time_interp($template,$t);
    my ($file) = reverse sort < $files >;
    my %meta   = $meta->h5dump("-g Metadata/DatasetIdentification " . $file);

    -s $file or next;
    $meta{CompositeReleaseID} or next;

    my $ctime = (stat($file))[10];
    my $t_create = gmtime($ctime);
    return ($t_create, $file);

  }

  return ();

}
#******************************************************************************
sub genHDF { CLOCK:  my $time = shift;
             DMGR:   my $input = shift;
             DMGR:   my $output = shift;
             CONFIG: my $config = shift;
#******************************************************************************
# English Name: Generate HDF-5 Files
# -------------
#
# Purpose: Copies the L4_C MDL granule to the output location where the file
# -------- will be augmented with ISO metadata information.
#
# Language: Perl
# ---------
#
# See Also: CLOCK.pm, DMGR.pm, CONFIG.pm, ERROR::Handler.pm, &error_handler
# ---------
#
# Usage: $rc = genHDF($time, $input, $output, $config)
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK referent set to the current
#                                        date/time.
#
# $input                  DMGR       IN  DMGR referent describing all data
#                                        generated by the carbon model.
#
# $output                 DMGR       IN  DMGR referent describing all output
#                                        collection granules.
#
# $config               CONFIG       IN  CONFIG referent describing the
#                                        system configuration and state. The
#                                        granule type to be written to HDF is
#                                        stored in the hash under COLLECTION_ID.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler referent.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        1: Missing data transaction
#                                        2: Error creating output directory
#                                        3: Unable to create copy of HDF file
#    
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------   
#           09/04/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "genHDF";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Retrieve the input and output filenames.
# ========================================

  my $type    = $config->{COLLECTION_ID};
  my $in_dtr  = $input->{L4_C_DAILY};
  my $out_dtr = $output->{$type};

  my $datetime = $time->datetime;
  $eh->comment( "Generating the HDF-5 file: " .
                      "Collection = $type, " .
                      "Time = $datetime");

  $in_dtr  or return $eh->error(1,TYPE=>"L4_C_DAILY");
  $out_dtr or return $eh->error(1,TYPE=>$type);

# Copy the L4_C model HDF file.
# The copy will become the official
# level-4 granule.
# =================================

  my @files;

  @files    = $in_dtr->files();
  my $in_file  = (grep /\.h5$/, @files)[0];
  $in_file = $time->strftime($in_file);

  @files    = $out_dtr->files();
  my $out_file  = (grep /\.h5$/, @files)[0];
  $out_file = $time->strftime($out_file);

  my $path = dirname $out_file;
  if ( ! -d $path) { mkpath($path) or return $eh->fatal(2,PATH=>$path) }

  copy ($in_file, $out_file) or return $eh->fatal(3,FILE=>$out_file);

# Set Metadata Information
# ========================

  SPL4CMDL_NAMESPACE:

  my $tstep  = CLOCK->new();
  my $tstart = $time;
  my $tend   = $time + 86399;

  $config->{SPL4CMDL_FILE}         = $out_file;
  $config->{SPL4CMDL_fileName}     = basename $out_file;
  $config->{SPL4CMDL_version}      = $config->{CompositeReleaseID};
  $config->{SPL4CMDL_creationDate} = $tstep->datetime . ".000Z";
  $config->{SPL4CMDL_DOI}          = $config->{L4_C_identifier_product_DOI};

  $config->{SPL4CMDL_stepDateTime}           = $tstep->datetime . ".000Z";
  $config->{SPL4CMDL_rangeBeginningDateTime} = $tstart->datetime . ".000Z";
  $config->{SPL4CMDL_rangeEndingDateTime}    = $tend->datetime . ".999Z";

  return 1;
}
#******************************************************************************
sub insertGroupMeta { CLOCK:  my $time = shift;
                      DMGR:   my $output = shift;
                      CONFIG: my $config = shift;
#******************************************************************************
# English Name: Insert Group Metadata
# -------------
#
# Purpose: Inserts ISO group-level metadata into HDF-5 granules.
# -------- 
#
# Language: Perl
# ---------
#
# Usage: $rc = insertGroupMeta($time, $output, $config);
# ------ $exception = $eh->isError();
#
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK referent set to the date/time
#                                        of the granule to receive metadata
#
# $output                 DMGR       IN  DMGR referent describing all output
#                                        collection granules.
#
# $config               CONFIG    INOUT  CONFIG referent containing all
#                                        metadata information for populating
#                                        the granule.
#
# $rc                  integer      OUT  function return value (see $exception):
#
#                                        0: failure
#                                        1: success
#
# $exception           integer      OUT  Thrown Exceptions:
#
#                                        0: no exception occurred
#                                        1: error returned from metadata
#                                           insertion code.
#
# $eh            ERROR_HANDLER      ---  ERROR::Handler referent.
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           03/29/2014      J.Ardizzone  created.
#******************************************************************************

  STRING:        my $this = "insertGroupMeta";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Retrieve HDF-5 filename.
# ========================

  STRING: my $type = $config->{COLLECTION_ID};
  DTR:    my $dtr  = $output->{$type};

  my $datetime = $time->datetime;
  $eh->comment( "Inserting the HDF5 group metadata: " .
                      "Collection = $type, " .
                      "Time = $datetime");

  $dtr or return $eh->error(1,TYPE=>$type);

  FILETMPLT: my $file;
  FILETMPLT: my @files = $dtr->files();

  $file  = (grep /\.h5$/, @files)[0];
  FILENAME:  my $HDF_file = $time->strftime($file);

  $file  = (grep /\.qa$/, @files)[0];
  FILENAME:  my $QA_file = $time->strftime($file);

# Define a UUID
# =============

  my $ug = new Data::UUID;
  $config->{UUID} = $ug->create_str();

# Define and populate the namelist with
# metadata.
# =====================================

  FILENAME: my $namelist = $type . "_group_meta.nml";
  FILENAME: my $group_meta = File::Spec->catdir($config->{L4_C_RUN},$namelist);

  $config->jobConfig($config->{L4_C_RIP},$config->{L4_C_RUN},TIMELESS=>1);

# Insert the metadata into the granule.
# =====================================

  system "insertMetaGroups.x $group_meta $HDF_file"
                             and return $eh->error(2);

  return 1;

}

sub insertConfig { CLOCK:  my $time = shift;
                   DMGR:   my $output = shift;
                   CONFIG: my $config = shift;

  STRING:        my $this = "insertConfig";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

  COLLECTION: my $type = $config->{COLLECTION_ID};
  DTR:        my $dtr  = $output->{$type};

  $dtr or return $eh->error(1,TYPE=>$type);

  FILETMPLT: my @files = $dtr->files();
  FILETMPLT: my $file  = (grep /\.h5$/, @files)[0];
  FILENAME:  my $HDF_file = $time->strftime($file);

# Write out the configuration
# parameters to the HDF-5 file.
# =============================

  FILENAME:  my $pathname;
  METADATA:  my (@keys, %meta); 
  METADATA:  my $meta = METADATA->new();
  DIRECTORY: my $root = $config->{L4_C_ROOT};

  $pathname = File::Spec->catfile($root, "config");
  @keys = $config->keys($pathname); 
  %meta = $config->hash(@keys);
  $meta->addGroup("Metadata/Config",%meta);

  $pathname = File::Spec->catfile($root, "crid", "config");
  @keys = $config->keys($pathname); 
  %meta = $config->hash(@keys);
  $meta->addGroup("Metadata/CRID/Root",%meta);

  $pathname = File::Spec->catfile($root, "crid", $type, "config");
  @keys = $config->keys($pathname); 
  %meta = $config->hash(@keys);
  $meta->addGroup("Metadata/CRID/" . $type, %meta);

  HASH_REF: my $changeLog = $config->{changeLog} // {};
  $meta->addGroup("Metadata/CRID/changeLog", %$changeLog);

  $meta->write($HDF_file);

# insertConfigTar($HDF_file,$config);

  return 1;
}
#******************************************************************************
sub insertXMLMeta { CLOCK:  my $time = shift;
                    DMGR:   my $output = shift;
                    CONFIG: my $config = shift;
#******************************************************************************
# English Name: Insert XML Metadata
# -------------
#
# Purpose: Creates ISO 19139 XML data by transforming the group metadata on the
# -------- HDF file using an XSL Transform. The XML is created as an autonomous
#          file and also inserted into the HDF file as a string attribute.
#
# Language: Perl
# ---------
#
# See Also: CLOCK.pm, DMGR.pm, CONFIG.pm, ERROR::Handler.pm, &error_handler
# ---------
#
# Usage: $rc = insertXMLMeta($time, $output, $config)
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK referent set to the current
#                                        date/time.
#
# $output                 DMGR       IN  DMGR referent describing all output
#                                        collection granules.
#
# $config               CONFIG       IN  CONFIG referent describing the
#                                        system configuration and state. The
#                                        granule type to be compressed is
#                                        stored in the hash under COLLECTION_ID.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler referent.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        1: HDF file not found
#                                        2: Error returned from h5repack
#                                        3: Unknown collection type. See
#                                           $config->{COLLECTION_ID}.
#    
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------   
#           04/11/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "insertXMLMeta";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Retrieve the HDF filename.
# ==========================

  my $type = $config->{COLLECTION_ID};
  my $dtr  = $output->{$type};
  my $transform = File::Spec->catfile($config->{L4_C_RUN},"hdf5xml_to_isoxml.xsl");
  my $saxon = File::Spec->catfile($config->{L4_C_PATH},"saxon9he.jar");

  my $datetime = $time->datetime;
  $eh->comment( "Inserting the ISO dataset XML metadata: " .
                      "Collection = $type, " .
                      "Time = $datetime");

  $dtr or return $eh->error(3,TYPE=>$type);

# Identify the HDF and XML filenames
# ==================================

  my @files = $dtr->files();
  my ($hdf_file) = grep /\.h5$/, @files;
  my ($iso_xml_file) = grep /\.xml$/, @files;

  $hdf_file = $time->strftime($hdf_file);
  $iso_xml_file = $time->strftime($iso_xml_file);

  my $xml_tmp_file = $hdf_file;
  $xml_tmp_file =~ s/\.h5/\.xml/;

  -f $hdf_file or return $eh->error(1,FILE=>$hdf_file);

# Create runtime input files
# ==========================

  $config->jobConfig($config->{L4_C_RIP},$config->{L4_C_RUN},TIMELESS=>1);

# Extract the group-level metadata from
# the HDF-5 file.
# =====================================
  
  my $output = `h5dump --xml --onlyattr -m "%12.7g" $hdf_file`;
  return $eh->error(2) if $?;

  open (my $fh, ">$xml_tmp_file");
  print $fh $output;
  close $fh;

# Create the ISO 19139 XML file
# =============================

  system "java -cp $saxon net.sf.saxon.Transform -tree:linked -t -T " .
         "-s:$xml_tmp_file -xsl:$transform -o:$iso_xml_file"
         and return $eh->error(2);

# Insert the ISO XML file into the
# HDF-5 file as a string attribute.
# =================================

  my $filesize = -s $iso_xml_file;
  my $attribute_name = "/Metadata/iso_19139_dataset_xml"; 
  system "insertXMLFile.x $attribute_name $iso_xml_file $hdf_file $filesize"
                                         and return $eh->error(2);

# Clean Up
# ========

  unlink $xml_tmp_file;

  return 1;
}

#******************************************************************************
sub insertSeriesXML { CLOCK:  my $time = shift;
                      DMGR:   my $output = shift;
                      CONFIG: my $config = shift;
#******************************************************************************
# English Name: Insert Series XML Metadata
# -------------
#
# Purpose: Inserts the curated ISO 19139 Series XML data into the HDF5
# -------- granules.
#
# Language: Perl
# ---------
#
# See Also: CLOCK.pm, DMGR.pm, CONFIG.pm, ERROR::Handler.pm, &error_handler
# ---------
#
# Usage: $rc = insertSeriesXML($time, $output, $config)
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK referent set to the current
#                                        date/time.
#
# $output                 DMGR       IN  DMGR referent describing all output
#                                        collection granules.
#
# $config               CONFIG       IN  CONFIG referent describing the
#                                        system configuration and state. The
#                                        granule type to be compressed is
#                                        stored in the hash under COLLECTION_ID.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler referent.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        1: Missing data transaction file
#                                        2: HDF file not found
#                                        3: Series XML file not found
#                                        4: Error occurred during XML insertion
#    
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------   
#           06/12/2014      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "insertSeriesXML";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Retrieve the HDF filename.
# ==========================

  my $type = $config->{COLLECTION_ID};
  my $lc_type = lc $type;

  my $datetime = $time->datetime;
  $eh->comment( "Inserting the ISO series XML metadata: " .
                      "Collection = $type, " .
                      "Time = $datetime");

  my $dtr = $output->{$type};
  $dtr or return $eh->error(1,TYPE=>$type);

# Identify the HDF and XML filenames
# ==================================

  my ($hdf_file) = $dtr->files({FILE_TYPE=>"SCIENCE"});
  $hdf_file = $time->strftime($hdf_file);

  -f $hdf_file or return $eh->error(2,FILE=>$hdf_file);

# The lines of code referenced a static
# pre-generated XML series file.
# =======================================

# Static pre-generated XML series file.
# my $name = $type . "_series.xml";
# my $series_xml_file = File::Spec->catfile($config->{L4_C_RUN},$name);

# Dynamically generated XML series file.
  my $path = dirname $hdf_file;
  my $series_xml_file = File::Spec->catfile($path, "L4_C_" . $lc_type .
                                                      "_series.xml");

# Create runtime input files
# ==========================

  $config->jobConfig($config->{L4_C_RIP},$config->{L4_C_RUN},TIMELESS=>1);

# Insert the ISO XML file into the
# HDF-5 file as a string attribute.
# =================================

  my $filesize = -s $series_xml_file;
  $filesize or return $eh->error(3,FILE=>$series_xml_file);

  my $attribute_name = "/Metadata/iso_19139_series_xml"; 
  system "insertXMLFile.x $attribute_name $series_xml_file $hdf_file $filesize"
                                         and return $eh->error(4);

  return 1;
}

#******************************************************************************
sub addCFMeta { CLOCK:  my $time = shift;
                        DMGR:   my $output = shift;
                        CONFIG: my $config = shift;
#******************************************************************************
# English Name: Add Additional CF Metadata
# -------------
#
# Purpose: Inserts additional CF (Climate and Forecast) metadata to increase
# -------- usability and conformity to industry standards.
#
# Language: Perl
# ---------
#
# See Also: CLOCK.pm, DMGR.pm, CONFIG.pm, ERROR::Handler.pm, &error_handler
# ---------
#
# Usage: $rc = addCFMeta($time, $output, $config)
# ------ $exception = $eh->isError();
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $time                  CLOCK       IN  CLOCK referent set to the current
#                                        date/time.
#
# $output                 DMGR       IN  DMGR referent describing all output
#                                        collection granules.
#
# $config               CONFIG       IN  CONFIG referent describing the
#                                        system configuration and state.
#
# $rc                  integer      OUT  function return value:
#
#                                        0: invalid or incorrect usage
#                                        1: success
#
#                                        undef: exception occurred.
#
# $eh           ERROR::Handler      OUT  Error handler referent.
#
# $exception           integer      OUT  Thrown Exception:
#
#                                        1: Missing data transaction file
#                                        2: HDF file not found
#                                        3: Augmentation failed
#                                        4: Unable to move file
#    
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------   
#           08/27/2018      J.Ardizzone  created.
#******************************************************************************

  FUNCTION_NAME: my $this = "addCFMeta";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Retrieve the HDF filename.
# ==========================

  my $type = $config->{COLLECTION_ID};

  my $datetime = $time->datetime;
  $eh->comment( "Inserting CF metadata: " .
                      "Collection = $type, " .
                      "Time = $datetime");

  my $dtr = $output->{$type};
  $dtr or return $eh->error(1,TYPE=>$type);

# Identify the HDF file.
# ======================

  my ($hdf_file) = $dtr->files({FILE_TYPE=>"SCIENCE"});
  $hdf_file = $time->strftime($hdf_file);

  -f $hdf_file or return $eh->error(2,FILE=>$hdf_file);

# Insert the CF metadata into the
# HDF-5 file.
# =================================

  my $tmp_file = $hdf_file . ".tmp";

  system "L4_C_augment.py $hdf_file $tmp_file" and return $eh->error(3);
  move ($tmp_file, $hdf_file) or return $eh->error(4,FILE=>$hdf_file);

  return 1;
}

#******************************************************************************
sub insertConfigTar { STRING: my $fname = shift;
                      CONFIG: my $config = shift;
#******************************************************************************

  STRING:        my $this = "insertConfigTar";
  ERROR_HANDLER: my $eh = ERROR::Handler->new(\&error_handler,$this);

# Get a listing of the run-time
# files for the data stream.
# =============================

  chdir "$config->{L4_OPS_directoryID}";
  chdir "SPL4C";

  my @files = ();
  my $tar_file = $fname . ".tar";
  my $find = FIND->new($config->{L4_C_STREAM_version});

  push @files, $find->files('config$');
  push @files, $find->files('\.nml$');
  push @files, $find->files('\.dtr$');
  push @files, $find->files('\.j$');
  push @files, $find->files('\.rip$');
  push @files, $find->files('clock$');
  push @files, $find->files('log$');
# push @files, $find->files('\.status$');
# push @files, $find->files('g5_modules$');
# push @files, $find->files('\.x$');

# Insert the run-time configuration
# tarball into the HDF-5 file.
# =================================

  system "tar cvf $tar_file @files";

  FILESIZE: my $size = -s $tar_file;

# system "h5import $tar_file -d $size -p Config/runTimeConfigTar" .
#        " -t UIN -s 8 -o $fname" and die "h5import failed";

  unlink $tar_file;

  return 1;
}

#******************************************************************************
sub error_handler { my $error_handle = shift;
                    my $error_code   = shift;
                    my %options      = scalar(@_) ? @_ : ();
#******************************************************************************
# English Name: Error Handler
# -------------
#
# Purpose: Reports exceptions for the invoking method. This error handler
# -------- is a catalog of registed exceptions for all methods contained in this
#          application.
#
# Language: Perl
# ---------
#
# See Also: ERROR::Handler.pm, LOG::Handler.pm
# --------- 
#
# Notes: 1. Developers must register new or changed exceptions by adding or
# ------    updating the error handler blocks contained in this method.
#
#        2. This method is intended to be invoked by the ERROR::Handler
#           module. Please see ERROR::Handler.pm for more information.
#
# Usage: $eh = ERROR::Handler->new(\&error_handler,$this);
# ------ $eh->$type($error_handle, $error_code, %options);
#
# Interface:              Type   Access  Description
# ----------                     Intent
#
# $eh           ERROR::Handler       IN  Error Handler object instantiated by
#                                        the invoking method.
#
# \&error_handler         CODE       IN  Reference to this method.
#
# $type                 string       IN  error method type (see note-2).
#
# $error_handle         string       IN  name of invoking method.
#
# $error_code          integer       IN  exception identifier.
#
# %options                hash       IN  optional arguments used to resolve
#                                        an exception message.
#
# Programmer: Joseph V. Ardizzone
# ----------- (NASA Goddard Space Flight Center)
#             (Global Modeling and Assimilation Office - GMAO)
#
# Modified:       Date           Author  Description
# ---------
#           08/27/2014      J.Ardizzone  created.
#******************************************************************************

  my $type = $options{ERROR_TYPE};
  my $lh   = LOG::Handler->new(HANDLE=>$error_handle);

  defined $options{ERROR_ELAPSED_TIME} and do {

    my $seconds = $options{ERROR_ELAPSED_TIME};
    $lh->comment(0,"Exiting $error_handle : [${seconds}s]");
    return;

  };

  $options{ERROR_TRACEBACK} and do {

    $lh->error($error_code,"Traceback: $error_handle() encountered an error.");
    return;

  };

  $error_code or return $lh->comment(0,$options{COMMENT});

# genDAAC() error handle
# ======================

  $error_handle eq "genDAAC" and do {

    $error_code == 1 and do {
      $lh->$type(1,"Missing data transaction for type: " .
                   "\"$options{TYPE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# genHDF() error handle
# ======================

  $error_handle eq "genHDF" and do {

    $error_code == 1 and do {
      $lh->$type(1,"Missing data transaction for type: " .
                   "\"$options{TYPE}\".");
      return;
    };

    $error_code == 2 and do {
      $lh->$type(2,"Unable to create directory: " .
                   "\"$options{PATH}\".");
      return;
    };

    $error_code == 3 and do {
      $lh->$type(3,"Failed to copy L4_C daily output granule : " .
                   "\"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# genMDL() error handle
# =====================

  $error_handle eq "genMDL" and do {

    $error_code == 1 and do {
      $lh->$type(1,"Missing input data transaction for type: " .
                   "\"$options{TYPE}\".");
      return;
    };

    $error_code == 2 and do {
      $lh->$type(1,"Missing output data transaction for type: " .
                   "\"$options{TYPE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# getMDLInfo() error handle
# =========================

  $error_handle eq "getMDLInfo" and do {

    $error_code == 1 and do {
      $lh->$type(1,"Missing data transaction for type: \"$options{TYPE}\".");
      return;
    };

    $error_code == 2 and do {
      $lh->$type(2,"L4CMDL file is missing: \"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# getMETInfo() error handle
# =========================

  $error_handle eq "getMETInfo" and do {

    $error_code == 1 and do {
      $lh->$type(1,"L4CMET file is missing: \"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# getMODInfo() error handle
# =========================

  $error_handle eq "getMODInfo" and do {

    $error_code == 1 and do {
      $lh->$type(1,"L4CMOD file is missing: \"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# getCLIMInfo() error handle
# ==========================

  $error_handle eq "getCLIMInfo" and do {

    $error_code == 1 and do {
      $lh->$type(1,"L4CCLIM file is missing: \"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# getANCInfo() error handle
# =========================

  $error_handle eq "getANCInfo" and do {

    $error_code == 1 and do {
      $lh->$type(1,"L4CANC file is missing: \"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# getFPARInfo() error handle
# ==========================

  $error_handle eq "getFPARInfo" and do {

    $error_code == 1 and do {
      $lh->$type(1,"L4CMOD file is missing: \"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# getLFOInfo() error handle
# =========================

  $error_handle eq "getLFOInfo" and do {

    $error_code == 1 and do {
      $lh->$type(1,"L4CMET file is missing: \"$options{FILE}\".");
      return;
    };
    
    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# getGPHInfo() error handle
# =========================

  $error_handle eq "getGPHInfo" and do {

    $error_code == 1 and do {
      $lh->$type(1,"L4CMET file is missing: \"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# getSMAPInfo() error handle
# ==========================

  $error_handle eq "getSMAPInfo" and do {

    $error_code == 1 and do {
      $lh->$type(1,"L4CMET file is missing: \"$options{FILE}\".");
      return;
    };

    $error_code == 2 and do {
      $lh->$type(2,"SPL3SMA file is missing: \"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# insertSeriesXML() error handle
# ==============================

  $error_handle eq "insertSeriesXML" and do {

    $error_code == 1 and do {
      $lh->$type(1,"Missing data transaction for type: \"$options{TYPE}\".");
      return;
    };

    $error_code == 2 and do {
      $lh->$type(2,"HDF file is missing: \"$options{FILE}\".");
      return;
    };

    $error_code == 3 and do {
      $lh->$type(3,"XML series file is missing: \"$options{FILE}\".");
      return;
    };

    $error_code == 4 and do {
      $lh->$type(4,"Error returned from insertXMLFile application.");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

# addCFMeta() error handle
# ========================

  $error_handle eq "addCFMeta" and do {

    $error_code == 1 and do {
      $lh->$type(1,"Missing data transaction for type: \"$options{TYPE}\".");
      return;
    };

    $error_code == 2 and do {
      $lh->$type(2,"HDF file is missing: \"$options{FILE}\".");
      return;
    };

    $error_code == 3 and do {
      $lh->$type(3,"Error returned from L4_C_augment.py application.");
      return;
    };

    $error_code == 4 and do {
      $lh->$type(4,"Unable to move augmented file to \"$options{FILE}\".");
      return;
    };

    print STDERR "$error_handle: Unknown error: code = $error_code\n";

    return;

  };

  print STDERR "No error handle for \"$error_handle\"\n";

  return;

}
